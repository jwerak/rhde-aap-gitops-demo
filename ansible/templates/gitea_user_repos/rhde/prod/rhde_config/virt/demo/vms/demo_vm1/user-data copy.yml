#cloud-config

users:
  - name: admin
    gecos: Administrator
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users, wheel
    lock_passwd: false
    passwd: $6$3C0fNaU.aqxvP2wf$WaH5Us4KVqsEMFzXrwLqI8l0UekVvzPUEaFwqeN0BPZ3ZJDN4E7qlsXL48R9rVIdoM2q/HMOiurhHXQ9JiFV11
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDSL7uWGj8cgWyIOaspgKdVy0cKJ+UTjfv7jBOjG2H/GN8bJVXy72XAvnhM0dUM+CCs8FOf0YlPX+Frvz2hKInrmRhZVwRSL129PasD12MlI3l44u6IwS1o/W86Q+tkQYEljtqDOo0a+cOsaZkvUNzUyEXUwz/lmYa6G4hMKZH4NBj7nbAAF96wsMCoyNwbWryBnDYUr6wMbjRR1J9Pw7Xh7WRC73wy4Va2YuOgbD3V/5ZrFPLbWZW/7TFXVrql04QVbyei4aiFR5n//GvoqwQDNe58LmbzX/xvxyKJYdny2zXmdAhMxbrpFQsfpkJ9E/H5w0yOdSvnWbUoG5xNGoOB csmith@fringe

write_files:
  - path: /var/tmp/aap-auto-registration.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      sleep 5
      conn_name=$(nmcli -t -f NAME con show | head -n 1)
      device_name=$(nmcli -t -f GENERAL.DEVICES con show "$conn_name" | head -n 1 | cut -d: -f2)
      IP_ADDRESS=$(nmcli -t -f IP4.ADDRESS con show "$conn_name" | head -n 1 | cut -d: -f2 | cut -d/ -f1)
      MAC_ADDRESS=$(nmcli -g GENERAL.HWADDR device show "$device_name" | tr -d '\\')
      MAC_ADDRESS_FORMAT=$(echo "$MAC_ADDRESS" | tr -d ':')
      USER='{{ gitea_user_name }}{{ user_number }}'

      if [ -z "$IP_ADDRESS" ] || [ -z "$MAC_ADDRESS" ] || [ -z "$USER" ]; then
          echo "One or more required variables are empty. Script failed."
          exit 1
      fi
          
      JSON="{\
      \"ip_address\": \"$IP_ADDRESS\", \
      \"user\": \"$USER\", \
      \"nodename\": \"edge-vm-$MAC_ADDRESS_FORMAT\", \
      \"vm\": \"edge-$MAC_ADDRESS_FORMAT\", \
      \"env\": \"prod\" \
      }"

      source /var/opt/aap-eda.token
      /usr/bin/curl -H 'Content-Type: application/json' --data "$JSON" http://{{ eda_ip | default(ansible_host) }}:{{ eda_webhook_port | default('5000') }}


  - path: /etc/systemd/system/aap-auto-registration.service
    permissions: '0655'
    content: |
      [Unit]
      Description=Register to Ansible Automation Platform
      After=network.target
      After=connect-wifi.service
      ConditionPathExists=!/var/tmp/aap-registered

      [Service]
      Type=simple
      ExecStart=/bin/bash -c 'while true; do /var/tmp/aap-auto-registration.sh && /usr/bin/touch /var/tmp/aap-registered && break; done'

      [Install]
      WantedBy=default.target

runcmd:
  - [ systemctl, daemon-reload ]
  - [ systemctl, enable, aap-auto-registration.service ]
  - [ systemctl, start, --no-block, aap-auto-registration.service ]