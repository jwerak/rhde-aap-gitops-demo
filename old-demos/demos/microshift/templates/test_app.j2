cat <<EOF > /etc/microshift/manifests/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

resources:
  - testapp.yaml

patches:
  - patch: |-
      - op: replace
        path: "/spec/host"
        value: {{ microshift_test_app_name }}.apps.$(hostname -I | awk '{print $1}').nip.io
    target:
      kind: Route

EOF

cat <<EOF > /etc/microshift/manifests/testapp.yaml
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: {{ microshift_test_app_name }}
  name: {{ microshift_test_app_name }}
spec: {}
---
apiVersion: apps/v1                                                                                                                                                                                     
kind: Deployment                                                                                                                                                                                        
metadata:                                                                                                                                                                                                                                                                                                                                                                              
  labels:                                                                                                                                                                                               
    app: hello                                                                                                                                                                                          
  name: {{ microshift_test_app_name }}-hello                                                                                                                                                                                           
  namespace: {{ microshift_test_app_name }}                                                                                                                                                                                                                                                                                                                                           
spec:                                                                                                                                                                                                   
  replicas: 1
  selector:
    matchLabels:
      app: hello
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: hello
    spec:
      containers:
      - image: quay.io/tasato/hello-js:latest
        imagePullPolicy: Always
        name: hello-js
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File      
        volumeMounts:
        - mountPath: /mnt
          name: my-volume
      volumes:
      - name: my-volume
        persistentVolumeClaim:
          claimName: {{ microshift_test_app_name }}-lv-pvc        
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ microshift_test_app_name }}-lv-pvc
  namespace: {{ microshift_test_app_name }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1G
---
apiVersion: v1
kind: Service
metadata:
  name: {{ microshift_test_app_name }}-nodeport
  namespace: {{ microshift_test_app_name }}
spec:
  type: NodePort
  selector:
    app: hello
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      nodePort: 30080
---
apiVersion: v1
kind: Service
metadata:
  name: {{ microshift_test_app_name }}-service
  namespace: {{ microshift_test_app_name }}
spec:
  selector:
    app: hello
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: {{ microshift_test_app_name }}-route
  namespace: {{ microshift_test_app_name }}
spec:
  host: APP-HOST
  port:
    targetPort: 8080 
  to:
    kind: Service
    name: {{ microshift_test_app_name }}-service
    weight: 10
EOF